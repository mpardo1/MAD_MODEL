scale_color_manual(values=c('#FF2C00')) +
theme_bw()+
theme(text = element_text(size=16))
ggplot(df_Ah)  +
geom_line(aes(date, Ah), color = "dark green") +
ylab("Counts") +
ggtitle("Handling Adult mosquito dynamics") +
theme_bw()+
theme(text = element_text(size=16)) +
scale_color_manual(values=c('#f0ff33'))
View(ode_df)
View(ode_df)
as.list(y)
debugSource("~/MAD_MODEL/VECTOR_MODEL/Code/INTEGRATION/model_vector_rho_cte.R", echo=TRUE)
y
y
y
y[which(y<0)]
debugSource("~/MAD_MODEL/VECTOR_MODEL/Code/INTEGRATION/model_vector_rho_cte.R", echo=TRUE)
y
y
y
y
y
y
y
y
y
t
y
y
t
out <- ode(Y, times=seq(time_step, time_step + 1, by=1), func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"),
events=list(func = posfun, time = c(0:max_t)))
time_step <- 12
out <- ode(Y, times=seq(time_step, time_step + 1, by=1), func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"),
events=list(func = posfun, time = c(0:max_t)))
seq(time_step, time_step + 1, by=1)
rm(list = ls())
library(easypackages)
libraries("ggplot2","tidyverse","ggstatsplot","deSolve")
# Rho data:
Path = "~/MAD_MODEL/VECTOR_MODEL/data/df_rho.dat"
df_rho <- data.frame(t(read.table(Path, header=FALSE)))
colnames(df_rho) <- c("time", "rho", "date")
df_rho$date = as.Date(df_rho$date , "%Y-%m-%d")
df_rho$rho <- as.numeric(df_rho$rho)
min_date <- min(df_rho$date)
max_date <- max(df_rho$date)
df_rho$time <- as.numeric(df_rho$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_rho$rho[df_rho$date > as.Date("2018-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2019-04-01" , "%Y-%m-%d")] <- 0
df_rho$rho[df_rho$date > as.Date("2019-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2020-04-01" , "%Y-%m-%d")] <- 0
ggplot(df_rho) +
geom_line(aes(x = date, y =rho)) +
ggtitle("Encounter rate computed from Citizen Science model") +
theme_bw() +
theme(text = element_text(size=14))
df_date <- df_rho[,c(1,3)]
###############   ODE INTEGRATION   ##################
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
# Path = paste(PC,Path, sep="")
setwd(Path)
system("R CMD SHLIB model_vec_cte.c")
dyn.load("model_vec_cte.so")
fec = 100
K = 250000
Hum = 13554
omega_t = 0.2
delta_L = 0.2
delta_A = 0.3
d_L = 0.8
a = 0.01
parms = c(fecun = fec, Ka = K, Hu = Hum, del_L = delta_L, del_A = delta_A, dev_L = d_L, gon = a)
# We set the initial conditions to zero.
Y <- c(y1 = 100, y2 = 0, y3 = 0)
min_t <- 1
max_t <- 100
times <- seq(min_t,max_t, 1)
# List with the data frames of the forcings, sort as the c code.
# df_rho$rho[df_rho$rho == 0 ] <- 0.00000001
forcs_mat <-data.matrix(df_rho[,1:2])
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
# Event :
# This is where we define your event function
# Add this directly above your call to ode()
posfun <- function(t, y, parms){
with(as.list(y), {
y[which(y<0)] <- 0
return(y)
})
}
out <- ode(Y, times=times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"),
events=list(func = posfun, time = c(0:max_t)))
rm(list = ls())
library(easypackages)
libraries("ggplot2","tidyverse","ggstatsplot","deSolve")
# Rho data:
Path = "~/MAD_MODEL/VECTOR_MODEL/data/df_rho.dat"
df_rho <- data.frame(t(read.table(Path, header=FALSE)))
colnames(df_rho) <- c("time", "rho", "date")
df_rho$date = as.Date(df_rho$date , "%Y-%m-%d")
df_rho$rho <- as.numeric(df_rho$rho)
min_date <- min(df_rho$date)
max_date <- max(df_rho$date)
df_rho$time <- as.numeric(df_rho$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_rho$rho[df_rho$date > as.Date("2018-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2019-04-01" , "%Y-%m-%d")] <- 0
df_rho$rho[df_rho$date > as.Date("2019-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2020-04-01" , "%Y-%m-%d")] <- 0
ggplot(df_rho) +
geom_line(aes(x = date, y =rho)) +
ggtitle("Encounter rate computed from Citizen Science model") +
theme_bw() +
theme(text = element_text(size=14))
df_date <- df_rho[,c(1,3)]
###############   ODE INTEGRATION   ##################
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
# Path = paste(PC,Path, sep="")
setwd(Path)
system("R CMD SHLIB model_vec_cte.c")
dyn.load("model_vec_cte.so")
fec = 100
K = 250000
Hum = 13554
omega_t = 0.2
delta_L = 0.2
delta_A = 0.3
d_L = 0.8
a = 0.01
parms = c(fecun = fec, Ka = K, Hu = Hum, del_L = delta_L, del_A = delta_A, dev_L = d_L, gon = a)
# We set the initial conditions to zero.
Y <- c(y1 = 100, y2 = 0, y3 = 0)
min_t <- 1
max_t <- 100
times <- seq(min_t,max_t, 1)
# List with the data frames of the forcings, sort as the c code.
# df_rho$rho[df_rho$rho == 0 ] <- 0.00000001
forcs_mat <-data.matrix(df_rho[,1:2])
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
# Event :
# This is where we define your event function
# Add this directly above your call to ode()
posfun <- function(t, y, parms){
with(as.list(y), {
y[which(y<0)] <- 0
return(y)
})
}
out <- ode(Y, times=times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"),
events=list(func = posfun, time = c(0:max_t)))
ode <- data.frame(out)
View(ode)
View(ode)
saveRDS(df_A, file = "~/MAD_MODEL/SUR_MODEL/Code/adults.rds")
df_A <- ode_df[,c(5,4)]
rm(list = ls())
library(easypackages)
libraries("ggplot2","tidyverse","ggstatsplot","deSolve")
# Rho data:
Path = "~/MAD_MODEL/VECTOR_MODEL/data/df_rho.dat"
df_rho <- data.frame(t(read.table(Path, header=FALSE)))
colnames(df_rho) <- c("time", "rho", "date")
df_rho$date = as.Date(df_rho$date , "%Y-%m-%d")
df_rho$rho <- as.numeric(df_rho$rho)
min_date <- min(df_rho$date)
max_date <- max(df_rho$date)
df_rho$time <- as.numeric(df_rho$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_rho$rho[df_rho$date > as.Date("2018-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2019-04-01" , "%Y-%m-%d")] <- 0
df_rho$rho[df_rho$date > as.Date("2019-12-01" , "%Y-%m-%d") &
df_rho$date < as.Date("2020-04-01" , "%Y-%m-%d")] <- 0
ggplot(df_rho) +
geom_line(aes(x = date, y =rho)) +
ggtitle("Encounter rate computed from Citizen Science model") +
theme_bw() +
theme(text = element_text(size=14))
df_date <- df_rho[,c(1,3)]
###############   ODE INTEGRATION   ##################
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
# Path = paste(PC,Path, sep="")
setwd(Path)
system("R CMD SHLIB model_vec_cte.c")
dyn.load("model_vec_cte.so")
fec = 100
K = 250000
Hum = 13554
omega_t = 0.2
delta_L = 0.2
delta_A = 0.3
d_L = 0.8
a = 0.01
parms = c(fecun = fec, Ka = K, Hu = Hum, del_L = delta_L, del_A = delta_A, dev_L = d_L, gon = a)
# We set the initial conditions to zero.
Y <- c(y1 = 100, y2 = 0, y3 = 0)
min_t <- 1
max_t <- 100
times <- seq(min_t,max_t, 1)
# List with the data frames of the forcings, sort as the c code.
# df_rho$rho[df_rho$rho == 0 ] <- 0.00000001
forcs_mat <-data.matrix(df_rho[,1:2])
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
# Event :
# This is where we define your event function
# Add this directly above your call to ode()
posfun <- function(t, y, parms){
with(as.list(y), {
y[which(y<0)] <- 0
return(y)
})
}
out <- ode(Y, times=times, func = "derivs",
parms = parms, dllname = "model_vec_cte", method = "ode45",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"),
events=list(func = posfun, time = c(0:max_t)))
ode <- data.frame(out)
ode_df <- merge(ode, df_date, by ="time")
ode_df$Sum <- NULL
head(ode_df)
colnames(ode_df) <- c("Time", "L", "Ah","A", "date" )
df_L_A <- ode_df[,c(5,2,3)]
df_Ah <- ode_df[,c(5,3)]
df_L <- ode_df[,c(5,2)]
df_A <- ode_df[,c(5,4)]
saveRDS(df_A, file = "~/MAD_MODEL/SUR_MODEL/Code/adults.rds")
###### Upload data from bgtraps.######
Path = '~/MAD_MODEL/SUR_MODEL/Code/adults.rds'
bg_traps <- read.csv(Path)
bg_traps$date <- as.Date(bg_traps$date,'%Y-%m-%d')
bg_traps <- readRDS(Path)
adult_sim <- readRDS(Path)
str(adult_sim)
###### Upload data from bgtraps.######
Path = '~/MAD_MODEL/SUR_MODEL/Code/adults.rds'
adult_sim <- readRDS(Path)
adult_sim$date <- as.Date(adult_sim$date,'%Y-%m-%d')
ggplot(adult_sim) +
geom_line(aes(date, A))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
l = length(adult_sim$A)
l = length(adult_sim$A)
dt = 7
mov = mov_avg(l,dt,adult_sim$A)
##### Moving Average #####
# Function to compute the moving average:
mov_avg <- function(dim, dt, vec_in){
vec_out = c(1:dim)
for(i in c(1:dim)){
if( i < (dim - dt)){
end = i + dt
vec_out[i] = mean(vec_in[i:end])
}else{
vec_out[i] = mean(vec_in[i:dim])
}
}
return(vec_out)
}
mov = mov_avg(l,dt,adult_sim$A)
df_bg_mov <- data.frame(date = adult_sim$date, bg_counts = mov)
df_bg_mov <- data.frame(date = adult_sim$date, mov_adults = mov)
df_tot$rho <- df_rho$rho
df_adult_mov <- data.frame(date = adult_sim$date, mov_adults = mov)
###### Upload data from bgtraps.######
Path = '~/MAD_MODEL/MAD_MODEL/data/bcn_bgcount_time_profile.csv'
bg_traps <- read.csv(Path)
bg_traps$date <- as.Date(bg_traps$date,'%Y-%m-%d')
ggplot(bg_traps, aes(x = date, y = value)) +
geom_point()
pop_density = 1664182
bg_traps$prop <- bg_traps$value/pop_density
ggplot(bg_traps) +
geom_line(aes(date, density))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
l = length(bg_traps$value)
dt = 7
mov = mov_avg(l,dt,bg_traps$value)
df_bg_mov <- data.frame(date = bg_traps$date, bg_counts = mov)
l = length(adult_sim$A)
dt = 7
mov = mov_avg(l,dt,adult_sim$A)
df_adult_mov <- data.frame(date = adult_sim$date, mov_adults = mov)
df_tot <- merge(df_rho_mov, df_adult_mov, by = "date")
l = length(df_rho$rho)
dt = 7
mov = mov_avg(l,dt,df_rho$rho)
df_rho_mov <- data.frame(time = vec, rho = mov)
df_rho_mov <- merge(df_rho_mov, df_date, by = "time")
###### Upload data from bgtraps.######
Path = '~/MAD_MODEL/MAD_MODEL/data/bcn_bgcount_time_profile.csv'
bg_traps <- read.csv(Path)
bg_traps$date <- as.Date(bg_traps$date,'%Y-%m-%d')
ggplot(bg_traps, aes(x = date, y = value)) +
geom_point()
pop_density = 1664182
bg_traps$prop <- bg_traps$value/pop_density
ggplot(bg_traps) +
geom_line(aes(date, density))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
l = length(bg_traps$value)
dt = 7
mov = mov_avg(l,dt,bg_traps$value)
df_bg_mov <- data.frame(date = bg_traps$date, bg_counts = mov)
df_tot <- merge(df_rho_mov, df_bg_mov, by = "date")
df_tot$time <- NULL
df_plot <- reshape2::melt(df_tot, id.vars = c("date"))
# Plot moving average rho and adult mosquitoes per human from BG
ggplot(df_plot,aes(date,value)) +
geom_line(aes( colour = variable))  +
scale_color_manual(values=c('#9E329F','#1642FE'))
df_tot <- merge(df_rho_mov, df_bg_mov, by = "date")
rm(list = ls())
library(easypackages)
libraries("gdata", "ggExtra","ggplot2", "numbers","tidyverse",
"data.table","multiplex","reshape","viridis","stats",
"ggpubr","ggstatsplot","e1071","mlr3misc","deSolve", "gganimate")
# Moving average function:
mov_avg <- function(dim, dt, vec_in){
vec_out = c(1:dim)
for(i in c(1:dim)){
if( i < (dim - dt)){
end = i + dt
vec_out[i] = mean(vec_in[i:end])
}else{
vec_out[i] = mean(vec_in[i:dim])
}
}
return(vec_out)
}
###--------------------BG COUNTS------------------------####
Path = '~/MAD_MODEL/MAD_MODEL/data/bcn_bgcount_time_profile.csv'
bg_traps <- read.csv(Path)
bg_traps$date <- as.Date(bg_traps$date,'%Y-%m-%d')
ggplot(bg_traps, aes(x = date, y = value)) +
geom_point()
pop_density = 1664182
bg_traps$prop <- bg_traps$value/pop_density
ggplot(bg_traps) +
geom_line(aes(date, density))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
l = length(bg_traps$value)
dt = 7
mov = mov_avg(l,dt,bg_traps$value)
df_bg_mov <- data.frame(date = bg_traps$date, bg_counts = mov)
#####------------------------SCATTER PLOT---------------------------#######
df_tot <- merge(df_rho_mov, df_bg_mov, by = "date")
#####------------------------SCATTER PLOT---------------------------#######
Path = '~/MAD_MODEL/SUR_MODEL/Code/adults.rds'
adults <- read.csv(Path)
adults <- readRDS(Path)
df_tot <- merge(adults, df_bg_mov, by = "date")
View(adults)
adults$mov_A <- mov_avg(l,dt,adults$A)
adults$mov_A <- mov_avg(l,dt,adults$A)
View(adults)
View(adults)
l = length(adults$A)
adults$mov_A <- mov_avg(l,dt,adults$A)
df_tot <- merge(adults, df_bg_mov, by = "date")
# Scatter plot with marginal distributions.
ggscatterstats(data = df_tot,
x = mov_bg_count,
y = mov_A,
xlab ="Adult mosquito per m^2 (BG traps)" ,
ylab =expression(rho),
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
# Scatter plot with marginal distributions.
ggscatterstats(data = df_tot,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito per m^2 (BG traps)" ,
ylab =expression(rho),
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
View(df_bg_mov)
# Scatter plot with marginal distributions.
ggscatterstats(data = df_tot,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito  (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
View(df_tot)
View(df_tot)
# Scatter plot by seasons:
df_season1 <- df_tot %>% filter(date > as.Date("2018-04-01","%Y-%m-%d") & date < as.Date("2018-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season1,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito  (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
#Season 2:
df_season2 <- df_tot %>% filter(date > as.Date("2019-04-01","%Y-%m-%d") & date < as.Date("2019-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season2,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito  (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
#Season 3:
df_season3 <- df_tot %>% filter(date > as.Date("2020-04-01","%Y-%m-%d") & date < as.Date("2020-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season3,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito  (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
ggplot(adults) +
geom_line(aes(date, A))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
# Scatter plot by seasons:
df_season1 <- df_tot %>% filter(date > as.Date("2018-05-01","%Y-%m-%d") & date < as.Date("2018-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season1,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito estimation (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
# Scatter plot by seasons:
df_season1 <- df_tot %>% filter(date > as.Date("2018-06-01","%Y-%m-%d") & date < as.Date("2018-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season1,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito estimation (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
# Scatter plot by seasons:
df_season1 <- df_tot %>% filter(date > as.Date("2018-05-15","%Y-%m-%d") & date < as.Date("2018-11-01","%Y-%m-%d") )
ggscatterstats(data = df_season1,
x = bg_counts,
y = mov_A,
xlab ="Adult mosquito estimation (BG traps)" ,
ylab = "Adult mosquito Simulations",
ggplot.component = list(ggplot2::geom_rug(sides = "b")))
###--------------------BG COUNTS------------------------####
Path = '~/MAD_MODEL/MAD_MODEL/data/bcn_bgcount_time_profile.csv'
bg_traps <- read.csv(Path)
bg_traps$date <- as.Date(bg_traps$date,'%Y-%m-%d')
ggplot(bg_traps, aes(x = date, y = value)) +
geom_point()
pop_density = 1664182
bg_traps$prop <- bg_traps$value/pop_density
ggplot(bg_traps) +
geom_line(aes(date, density))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
ggplot(df_bg_mov) +
geom_line(aes(date, bg_counts))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
#####------------------------SCATTER PLOT---------------------------#######
Path = '~/MAD_MODEL/SUR_MODEL/Code/adults.rds'
adults <- readRDS(Path)
ggplot(adults) +
geom_line(aes(date, A))  +
scale_x_date(date_breaks = "6 month",date_labels = "%b %y") +
ylab("Number of mosquito adults per human (BG estimation)") +
theme_bw()
l = length(adults$A)
adults$mov_A <- mov_avg(l,dt,adults$A)
df_tot <- merge(adults, df_bg_mov, by = "date")
