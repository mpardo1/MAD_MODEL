theme_bw() + scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
ggplot(ode_df)  +
geom_line(aes(date, Ah)) +
ylab("Counts") +
ggtitle("Handling mosquitoes dynamics") +
theme_bw() + scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
ode_df$Adults <- ode_df$A + ode_df$Ah
filename <- paste0("~/MAD_MODEL/SUR_MODEL/Code/adults_sim.rds")
saveRDS(ode_df, file = filename)
#------------------------------------------------------------------------------------#
############# INTEGRATION NON - AUTONOMOUS CTE MORTALITIES ##############
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
setwd(Path)
system("R CMD SHLIB model_vec_cte_mort.c")
dyn.load("model_vec_cte_mort.so")
f = 200
K = 250000
delt_L = 0.2
delt_A = 0.3
# We create a vector with the constant parameters.
parms = c(f,K,delt_L,delt_A)
# We set the initial conditions to cero.
Y <- c(100,0,0)
# List with the data frames of the forcings, sort as the c code.
forcs_mat <- list(data.matrix(df_rho),
data.matrix(df_dL_out),
data.matrix(df_gonot_out))
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec_cte_mort",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
ode_out <- data.frame(out)
ode_df <- merge(ode_out, df_date, by ="time")
ode_df$Sum <- NULL
head(ode_df)
#-------------------------------------------------------------------------------------#
########## PLOTS RESULTS INTEGRATION  ###########
colnames(ode_df) <- c("Time", "L", "Ah","A", "date" )
df_L_A <- ode_df[,c(5,2,3)]
df_Ah <- ode_df[,c(5,4)]
df_L <- ode_df[,c(5,2)]
df_plot_1 <- reshape2::melt(df_L_A, id.vars = c("date"))
df_plot_L <- reshape2::melt(df_L, id.vars = c("date"))
df_plot <- reshape2::melt(df_Ah, id.vars = c("date"))
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
# ode_df <- ode_df  %>% filter( ode_df$date  < as.Date("2019-04-01","%Y-%m-%d"))
ode_df <- ode_df  %>% filter( ode_df$date  > as.Date("2018-05-15","%Y-%m-%d"))
ggplot(ode_df)  +
geom_line(aes(date, L)) +
ylab("Counts") +
ggtitle("Larvae dynamics")+
theme_bw() +
# scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
# # Larva mortality rate
# delta_L <- function(T){
#   a = abs(-0.1305*T^2+3.868*T+30.83)
#   val = min(1, 1/a)
#   return(val)
# }
# Larva mortality rate
delta_L <- function(T){
val = 0.1727*exp(-((T-28.40)/10.20)^2)
return(val)
}
#-------------------------------------------------------------------------------#
######## PLOTS FUNCTIONAL RESPONSES #########
vec = seq(0,40,1)
df_gonot_vec <- data.frame(temp = vec, gonot =unlist(lapply(vec,gonot)))
df_dL_vec <- data.frame(temp = vec, dL = unlist(lapply(vec,d_L)))
df_deltaL_vec <- data.frame(temp = vec, deltaL = unlist(lapply(vec,delta_L)))
df_deltaA_vec <- data.frame(temp = vec, deltaA = unlist(lapply(vec,delta_A)))
ggplot(df_gonot_vec) + geom_line(aes(temp,gonot)) +
ggtitle("Inverse of the Gonotrophic cycle")+
theme_bw()
ggplot(df_dL_vec) + geom_line(aes(temp,dL)) +
ggtitle("Larva development rate")+
theme_bw()
ggplot(df_deltaL_vec) + geom_line(aes(temp,deltaL)) +
ggtitle("Larva mortality rate")+
theme_bw()
# # Larva mortality rate
# delta_L <- function(T){
#   a = abs(-0.1305*T^2+3.868*T+30.83)
#   val = min(1, 1/a)
#   return(val)
# }
# Larva mortality rate
delta_L <- function(T){
val = 0.021643*TË†2 - 0.959568*T + 10.440131
val = max(0, val)
return(val)
}
df_deltaL_vec <- data.frame(temp = vec, deltaL = unlist(lapply(vec,delta_L)))
df_deltaA_vec <- data.frame(temp = vec, deltaA = unlist(lapply(vec,delta_A)))
ggplot(df_gonot_vec) + geom_line(aes(temp,gonot)) +
ggtitle("Inverse of the Gonotrophic cycle")+
theme_bw()
#-------------------------------------------------------------------------------#
######## PLOTS FUNCTIONAL RESPONSES #########
vec = seq(0,40,1)
df_gonot_vec <- data.frame(temp = vec, gonot =unlist(lapply(vec,gonot)))
df_dL_vec <- data.frame(temp = vec, dL = unlist(lapply(vec,d_L)))
df_deltaL_vec <- data.frame(temp = vec, deltaL = unlist(lapply(vec,delta_L)))
df_deltaA_vec <- data.frame(temp = vec, deltaA = unlist(lapply(vec,delta_A)))
ggplot(df_gonot_vec) + geom_line(aes(temp,gonot)) +
ggtitle("Inverse of the Gonotrophic cycle")+
theme_bw()
ggplot(df_dL_vec) + geom_line(aes(temp,dL)) +
ggtitle("Larva development rate")+
theme_bw()
ggplot(df_deltaL_vec) + geom_line(aes(temp,deltaL)) +
ggtitle("Larva mortality rate")+
theme_bw()
ggplot(df_deltaA_vec) + geom_line(aes(temp,deltaA)) +
ggtitle("Mosquito adult mortality rate")+
theme_bw()
ggplot(df_dl_opt_vec) + geom_line(aes(temp,deltaA)) +
ggtitle("Mosquito adult mortality rate")+
theme_bw()
#---------------------------------------------------------------------------#
####### PLOTS FUNCTIONAL RESPONSE TEMP BCN 2018-2021 ########
# Compute the values of the functions/forcings with temp.
# Compute the minimum date of the rho:
min_rho_date <- min(df_rho$date)
min_temp_date <- min(temp$date)
min_date <-max(min_rho_date, min_temp_date)
max_rho_date <- max(df_rho$date)
max_temp_date <- max(temp$date)
max_date <-min(max_rho_date, max_temp_date)
# DFs with the date and value of the parameter at that time.
temp <- temp  %>% filter( temp$date >= min_date & temp$date <= max_date)
df_date <- data.frame(date = temp$date)
df_date$time = as.numeric(df_date$date - as.Date(min_date,"%Y-%m-%d") , units="days")
gono = unlist(lapply(temp$mean_temp,gonot))
df_gonot_out <- data.frame(date = temp$date, gono)
df_gonot_out$time = as.numeric(df_gonot_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_gonot_out <- df_gonot_out %>% filter( df_gonot_out$time >= 0)
df_dL_out <- data.frame(date = temp$date, dL = unlist(lapply(temp$mean_temp,d_L)))
df_dL_out$time = as.numeric(df_dL_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_dL_out <- df_dL_out %>% filter( df_dL_out$time >= 0)
df_deltaL_out <- data.frame(date = temp$date, deltaL = unlist(lapply(temp$mean_temp,delta_L)))
df_deltaL_out$time = as.numeric(df_deltaL_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_deltaL_out <- df_deltaL_out %>% filter( df_deltaL_out$time >= 0)
df_deltaA_out <- data.frame(date = temp$date, deltaA = unlist(lapply(temp$mean_temp,delta_A)))
df_deltaA_out$time = as.numeric(df_deltaA_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_deltaA_out <- df_deltaA_out %>% filter( df_deltaA_out$time >= 0)
df_rho$time = as.numeric(df_rho$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_rho <- df_rho %>% filter( df_rho$time >= 0)
ggplot(df_gonot_out) +
geom_line(aes(date,gono)) +
ggtitle("Gonotrophic cycle")+
theme_bw()
ggplot(df_dL_out) +
geom_line(aes(date,dL)) +
ggtitle("Larva development rate")+
theme_bw()
ggplot(df_deltaL_out) +
geom_line(aes(date,deltaL)) +
ggtitle("Larva mortality rate")+
theme_bw()
ggplot(df_deltaA_out) +
geom_line(aes(date,deltaA)) +
ggtitle("Adult mosquito mortality rate")+
theme_bw()
#-----------------------------------------------------------------------------------------#
############ PREPARE DATA FOR DESOLVE AS FORCINGS #############
df_gonot_out$date <- NULL
df_gonot_out <- df_gonot_out[,c(2,1)]
df_dL_out$date <- NULL
df_dL_out <- df_dL_out[,c(2,1)]
df_deltaL_out$date <- NULL
df_deltaL_out <- df_deltaL_out[,c(2,1)]
df_deltaA_out$date <- NULL
df_deltaA_out <- df_deltaA_out[,c(2,1)]
df_rho$date <- NULL
df_rho <- df_rho[,c(2,1)]
#-----------------------------------------------------------------------------------------#
############# INTEGRATION NON - AUTONOMOUS ##############
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
setwd(Path)
system("R CMD SHLIB model_vec.c")
dyn.load("model_vec.so")
f = 200
K = 250000
# We create a vector with the constant parameters.
parms = c(f,K)
# We set the initial conditions to cero.
Y <- c(100,0,0)
# List with the data frames of the forcings, sort as the c code.
forcs_mat <- list(data.matrix(df_rho),
data.matrix(df_deltaL_out),
data.matrix(df_deltaA_out),
data.matrix(df_dL_out),
data.matrix(df_gonot_out))
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
ode_out <- data.frame(out)
rm(list = ls())
library(easypackages)
libraries("ggplot2","tidyverse","ggstatsplot","deSolve")
#-----------------------------------------------------------------------------#
###### Rho data #######:
# Simulation data for participation:
Path_rho <- "~/MAD_MODEL/SUR_MODEL/Code/rho_sim.rds"
df_rho <- readRDS(Path_rho)
ggplot(df_rho) +
geom_line(aes(x = date, y =rho)) +
ggtitle("Encounter rate computed from Citizen Science model") +
theme_bw() +
theme(text = element_text(size=14))
df_date <- df_rho[,c(1,3)]
min_date_rho <- min(df_date$date)
max_date_rho <- max(df_date$date)
# Observed data for participation:
Path_rho_ob <- "~/MAD_MODEL/SUR_MODEL/Code/rho_observed.rds"
df_rho_ob <- readRDS(Path_rho_ob)
ggplot(df_rho_ob) +
geom_line(aes(x = date, y =rho)) +
ggtitle("Encounter rate computed from Citizen Science model") +
theme_bw() +
theme(text = element_text(size=14))
df_date_ob <- df_rho_ob[,c(1,3)]
min_date_rho_ob <- min(df_date_ob$date)
max_date_rho_ob <- max(df_date_ob$date)
###############   ODE INTEGRATION   ##################
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
setwd(Path)
system("R CMD SHLIB model_vec_cte.c")
dyn.load("model_vec_cte.so")
fec = 100
K = 250000
delta_L = 0.2
delta_A = 0.3
d_L = 0.8
a = 0.01
parms = c(fecun = fec, Ka = K, del_L = delta_L, del_A = delta_A, dev_L = d_L, gon = a)
# List with the data frames of the forcings:
# Set the new time to the rho:
# Data rho simulations:
ref_date <- min(df_rho$date)
df_rho$time <- as.numeric(df_rho$date - ref_date) +1
df_date <- data.frame(time = df_rho$time, date = df_rho$date)
forcs_mat <-data.matrix(df_rho[,c(1,2)])
# We set the initial conditions to zero.
Y <- c(y1 = 100, y2 = 0, y3 = 0)
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec_cte",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
head(out)
ode_df <- merge(out, df_date, by ="time")
ode_df$Sum <- NULL
head(ode_df)
colnames(ode_df) <- c("Time", "L", "Ah","A", "date" )
saveRDS(df_A, file = "~/MAD_MODEL/SUR_MODEL/Code/adults.rds")
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
ode_df <- ode_df  %>% filter( ode_df$date  < as.Date("2018-07-01","%Y-%m-%d"))
ggplot(ode_df)  +
geom_line(aes( date, L)) +
ylab("Counts") +
ggtitle("Vector dynamics") +
theme_bw() + scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
ggplot(ode_df)  +
geom_line(aes( date, A)) +
ylab("Counts") +
ggtitle("Vector dynamics") +
theme_bw() + scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
ggplot(ode_df)  +
geom_line(aes( date, Ah)) +
ylab("Counts") +
ggtitle("Vector dynamics") +
theme_bw() + scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
#------------------------------------------------------------------------------#
########## WITH PARAMETERS DEPENDING on T ###########
######---------- Temperatures from Barcelona-------------#####
Path_temp = "~/MAD_MODEL/VECTOR_MODEL/data/bcn_weather_daily.Rds"
temp <-read_rds(Path_temp)
temp$date = as.Date(temp$date , "%Y-%m-%d")
temp <- temp %>%  group_by(date) %>% summarise(mean_temp = mean(valor))
min_date_temp <- min(temp$date)
max_date_temp <- max(temp$date)
ggplot(temp) +
geom_line(aes(date, mean_temp))+
ggtitle("Mean temperature Barcelona") +
xlab("Mean temperature")+
theme_bw()
#-------------------------------------------------------------------------------#
# Functional responses:
# Gonotrophic cycle (Carlos):
gonot <- function(T){
a = 0.045*T^2-2.617*T+41.105
val = min(1,1/a)
return(val)
}
# Development rate
# d_L <- function(T){
#   val = 1/(0.14457*T^2 - 8.24857*T + 124.80857)
#   return(val)
# }
# Carlos version:
d_L <- function(T){
val = (0.14457*TË†2 - 8.24857*T + 124.80857)Ë†(-1)
return(val)
}
# # Larva mortality rate
# delta_L <- function(T){
#   a = abs(-0.1305*T^2+3.868*T+30.83)
#   val = min(1, 1/a)
#   return(val)
# }
# Larva mortality rate
delta_L <- function(T){
val = 0.021643*T^2 - 0.959568*T + 10.440131
val = max(0, val)
return(val)
}
# Adult mosquito mortality rate
delta_A <- function(T){
a = abs(-0.1921*T^2+8.147*T-22.98)
val =  min(1, 1/a)
return(val)
}
#-------------------------------------------------------------------------------#
######## PLOTS FUNCTIONAL RESPONSES #########
vec = seq(0,40,1)
# Development rate
# d_L <- function(T){
#   val = 1/(0.14457*T^2 - 8.24857*T + 124.80857)
#   return(val)
# }
# Carlos version:
d_L <- function(T){
val = (0.14457*T^2 - 8.24857*T + 124.80857)^(-1)
return(val)
}
# # Larva mortality rate
# delta_L <- function(T){
#   a = abs(-0.1305*T^2+3.868*T+30.83)
#   val = min(1, 1/a)
#   return(val)
# }
# Larva mortality rate
delta_L <- function(T){
val = 0.021643*T^2 - 0.959568*T + 10.440131
val = max(0, val)
return(val)
}
# Adult mosquito mortality rate
delta_A <- function(T){
a = abs(-0.1921*T^2+8.147*T-22.98)
val =  min(1, 1/a)
return(val)
}
#-------------------------------------------------------------------------------#
######## PLOTS FUNCTIONAL RESPONSES #########
vec = seq(0,40,1)
df_gonot_vec <- data.frame(temp = vec, gonot =unlist(lapply(vec,gonot)))
df_dL_vec <- data.frame(temp = vec, dL = unlist(lapply(vec,d_L)))
df_deltaL_vec <- data.frame(temp = vec, deltaL = unlist(lapply(vec,delta_L)))
df_deltaA_vec <- data.frame(temp = vec, deltaA = unlist(lapply(vec,delta_A)))
ggplot(df_gonot_vec) + geom_line(aes(temp,gonot)) +
ggtitle("Inverse of the Gonotrophic cycle")+
theme_bw()
ggplot(df_dL_vec) + geom_line(aes(temp,dL)) +
ggtitle("Larva development rate")+
theme_bw()
ggplot(df_deltaL_vec) + geom_line(aes(temp,deltaL)) +
ggtitle("Larva mortality rate")+
theme_bw()
ggplot(df_deltaA_vec) + geom_line(aes(temp,deltaA)) +
ggtitle("Mosquito adult mortality rate")+
theme_bw()
ggplot(df_dl_opt_vec) + geom_line(aes(temp,deltaA)) +
ggtitle("Mosquito adult mortality rate")+
theme_bw()
#---------------------------------------------------------------------------#
####### PLOTS FUNCTIONAL RESPONSE TEMP BCN 2018-2021 ########
# Compute the values of the functions/forcings with temp.
# Compute the minimum date of the rho:
min_rho_date <- min(df_rho$date)
#---------------------------------------------------------------------------#
####### PLOTS FUNCTIONAL RESPONSE TEMP BCN 2018-2021 ########
# Compute the values of the functions/forcings with temp.
# Compute the minimum date of the rho:
min_rho_date <- min(df_rho$date)
min_temp_date <- min(temp$date)
min_date <-max(min_rho_date, min_temp_date)
max_rho_date <- max(df_rho$date)
max_temp_date <- max(temp$date)
max_date <-min(max_rho_date, max_temp_date)
# DFs with the date and value of the parameter at that time.
temp <- temp  %>% filter( temp$date >= min_date & temp$date <= max_date)
df_date <- data.frame(date = temp$date)
df_date$time = as.numeric(df_date$date - as.Date(min_date,"%Y-%m-%d") , units="days")
gono = unlist(lapply(temp$mean_temp,gonot))
df_gonot_out <- data.frame(date = temp$date, gono)
df_gonot_out$time = as.numeric(df_gonot_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_gonot_out <- df_gonot_out %>% filter( df_gonot_out$time >= 0)
df_dL_out <- data.frame(date = temp$date, dL = unlist(lapply(temp$mean_temp,d_L)))
df_dL_out$time = as.numeric(df_dL_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_dL_out <- df_dL_out %>% filter( df_dL_out$time >= 0)
df_deltaL_out <- data.frame(date = temp$date, deltaL = unlist(lapply(temp$mean_temp,delta_L)))
df_deltaL_out$time = as.numeric(df_deltaL_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_deltaL_out <- df_deltaL_out %>% filter( df_deltaL_out$time >= 0)
df_deltaA_out <- data.frame(date = temp$date, deltaA = unlist(lapply(temp$mean_temp,delta_A)))
df_deltaA_out$time = as.numeric(df_deltaA_out$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_deltaA_out <- df_deltaA_out %>% filter( df_deltaA_out$time >= 0)
df_rho$time = as.numeric(df_rho$date - as.Date(min_date,"%Y-%m-%d") , units="days")
df_rho <- df_rho %>% filter( df_rho$time >= 0)
ggplot(df_gonot_out) +
geom_line(aes(date,gono)) +
ggtitle("Gonotrophic cycle")+
theme_bw()
ggplot(df_dL_out) +
geom_line(aes(date,dL)) +
ggtitle("Larva development rate")+
theme_bw()
ggplot(df_deltaL_out) +
geom_line(aes(date,deltaL)) +
ggtitle("Larva mortality rate")+
theme_bw()
ggplot(df_deltaA_out) +
geom_line(aes(date,deltaA)) +
ggtitle("Adult mosquito mortality rate")+
theme_bw()
#-----------------------------------------------------------------------------------------#
############ PREPARE DATA FOR DESOLVE AS FORCINGS #############
df_gonot_out$date <- NULL
df_gonot_out <- df_gonot_out[,c(2,1)]
df_dL_out$date <- NULL
df_dL_out <- df_dL_out[,c(2,1)]
df_deltaL_out$date <- NULL
df_deltaL_out <- df_deltaL_out[,c(2,1)]
df_deltaA_out$date <- NULL
df_deltaA_out <- df_deltaA_out[,c(2,1)]
df_rho$date <- NULL
df_rho <- df_rho[,c(2,1)]
#-----------------------------------------------------------------------------------------#
############# INTEGRATION NON - AUTONOMOUS ##############
Path = "~/MAD_MODEL/VECTOR_MODEL/Code/PARAM_ESTIMA/"
setwd(Path)
system("R CMD SHLIB model_vec.c")
dyn.load("model_vec.so")
f = 200
K = 250000
# We create a vector with the constant parameters.
parms = c(f,K)
# We set the initial conditions to cero.
Y <- c(100,0,0)
# List with the data frames of the forcings, sort as the c code.
forcs_mat <- list(data.matrix(df_rho),
data.matrix(df_deltaL_out),
data.matrix(df_deltaA_out),
data.matrix(df_dL_out),
data.matrix(df_gonot_out))
min_t <- min(df_rho$time)
max_t <- max(df_rho$time)
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model_vec",
initfunc = "initmod", nout = 1,
outnames = "Sum", initforc = "forcc",
forcings = forcs_mat, fcontrol = list(method = "constant"))
ode_out <- data.frame(out)
ode_df <- merge(ode_out, df_date, by ="time")
ode_df$Sum <- NULL
head(ode_df)
#-------------------------------------------------------------------------------------#
########## PLOTS RESULTS INTEGRATION ###########
colnames(ode_df) <- c("Time", "L", "Ah","A", "date" )
df_L_A <- ode_df[,c(5,2,3)]
df_Ah <- ode_df[,c(5,4)]
df_L <- ode_df[,c(5,2)]
df_plot_1 <- reshape2::melt(df_L_A, id.vars = c("date"))
df_plot_L <- reshape2::melt(df_L, id.vars = c("date"))
df_plot <- reshape2::melt(df_Ah, id.vars = c("date"))
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
# ode_df <- ode_df  %>% filter( ode_df$date  < as.Date("2019-04-01","%Y-%m-%d"))
ode_df <- ode_df  %>% filter( ode_df$date  > as.Date("2018-05-15","%Y-%m-%d"))
ggplot(ode_df)  +
geom_line(aes(date, L)) +
ylab("Counts") +
ggtitle("Larvae dynamics")+
theme_bw() +
# scale_y_continuous(labels = scientific_10)+
theme(text = element_text(size=18))
